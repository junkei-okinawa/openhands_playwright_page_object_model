---
name: repo
agent: CodeAct
---
Repository: e2e-test-automation
Description: Playwrightを使用したE2Eテストを自動化するPythonプロジェクトです。与えられたURLからHTMLを解析し、Page Object Modelのコードを自動生成します。このプロジェクトは、Web UI テストをPlaywright ＆ Page Object Model (POM) で実現するためにAI Agent[OpenHands](https://github.com/All-Hands-AI/OpenHands)を使用している実験的なプロジェクトです。
Directory Structure:
- tests/: E2Eテストスクリプトを格納するディレクトリ
- pages/: Page Object Modelのクラスを格納するディレクトリ
- utils/: ユーティリティ関数などを格納するディレクトリ

**プロジェクトの会話は全て日本語で行う**

## Setup

1. install [uv](https://docs.astral.sh/uv/getting-started/installation/)

    `uv`は`Rust`で書かれた非常に高速なPythonパッケージ&プロジェクト管理ツールです。
    - macOS and linux
    ```sh
    curl -LsSf https://astral.sh/uv/install.sh | sh
    echo 'eval "$(uv generate-shell-completion zsh)"' >> ~/.zshrc
    echo 'eval "$(uvx --generate-shell-completion zsh)"' >> ~/.zshrc
    ```
2. 依存関係をインストールします。
    ```bash
    uv sync
    ```
3. Playwrightのブラウザバイナリをインストールします。
    ```bash
    uv run playwright install --with-deps chromium
    ```
4. 仮想環境を作成します。
    ```bash
    uv venv
    ```
5. 仮想環境を有効化します。
    ```bash
    source .venv/bin/activate
    ```
6. `allure`（テストレポート自動生成ツール） をインストールします。
    ```bash
    sudo apt-get install -y default-jre
    wget https://github.com/allure-framework/allure2/releases/download/2.18.1/allure_2.18.1-1_all.deb
    sudo dpkg -i allure_2.18.1-1_all.deb
    rm allure_2.18.1-1_all.deb
    rm install_jre.log
    ```

## Guidelines
- コードスタイルは`PEP8`を準拠する。１行が長くなる場合は適宜改行する。改行ルールは[Flake8 Rules: Line break occurred after a binary operator (W504)](https://www.flake8rules.com/rules/W504.html)に準拠する
- テストスクリプトは`tests/`ディレクトリに配置します。
- 各テストケースは、対応するページのPage Object Modelクラスを使用します。
- Page Object Modelクラスは`pages/`ディレクトリに配置します。
- 可能な限りType Hintを記述します。
- 新しい機能を追加する際は、必ずE2Eテストを追加します。
- `git add`を実行する際には、必ず対象となるファイルを指定すること。
- `git add` を実行する際には、必ず `git status` でファイルの変更状態を確認すること。
- ファイル内容の変更、削除の際には、変更前のファイル内容を確認し、編集後に変更後のファイル内容を確認すること。
- `git commit`を実行する際には、必ず`-m`オプションを指定し適切な`commit message`を記述すること。

## テストのセットアップとpytestフィクスチャ
- **ページオブジェクトの初期化**: ページオブジェクトは、`conftest.py` 内のpytestフィクスチャを使用して初期化されます。これにより、テストのセットアップが簡素化され、コードの可読性が向上します。
- **データ駆動テスト**: テストデータは `test_data.json` ファイルで管理され、pytestフィクスチャを使用してロードされます。これにより、テストの柔軟性と保守性が向上します。

### 要素特定におけるXPathの活用
- Playwright で要素を特定する際、CSSセレクタだけでなく、XPath も積極的に活用しましょう。
- 特に、以下のような場合に XPath が有効です。
    - CSSセレクタでは特定が難しい複雑な要素構造の場合
    - テキストコンテンツの一部で要素を特定したい場合
- 例: `//article[contains(@class, "overview-card-wrapper")][1]` のように、特定のクラスを持つ要素の子要素を特定できます。
- 要素を特定する際は、ブラウザの開発者ツールで要素の構造を正確に把握しましょう。
- テストが失敗した場合は、まず要素の特定方法を見直すことを推奨します。
- `a:has-text("text")` のようなCSSセレクタは、要素のテキストコンテンツが完全に一致する場合にのみ機能します。
- XPath の `contains()` 関数は、テキストの一部が含まれる要素を特定するのに役立ちます。
- ただし、XPath で要素を特定する際は、**どの要素を特定すべきか**を間違えないように注意しましょう。

## Examples
- 新しいテストケースを追加する
  1. `tests/`ディレクトリに新しいテストスクリプトファイルを作成します。
  2. テスト対象のページに対応するPage Object Modelクラスを`pages/`ディレクトリに作成します。
  3. テストスクリプト内でPage Object Modelクラスを使用して、テストシナリオを実装します。
- Page Object Modelクラスを作成する
  1. `pages/`ディレクトリに新しいPythonファイルを作成します。
  2. ファイル内で、ページに対応するPage Object Modelクラスを定義します。
  3. クラス内には、ページ上の要素にアクセスするためのメソッドを定義します。

note:
*   **`uv` の使い方**: `uv` は Python のパッケージ管理ツールとして非常に高速で便利ですが、仮想環境の管理や `pytest` の実行には注意が必要です。
    *   `uv sync` は `requirements.txt` に記載された依存関係を仮想環境にインストールします。
    *   `uv tool install` はツールをグローバルにインストールし、仮想環境とは独立して実行されます。
    *   `uvx` は `uv tool` でインストールされたツールを実行するためのコマンドですが、仮想環境の依存関係を自動的に解決する機能はありません。
    *   `uv pip install -r requirements.txt` で仮想環境に依存関係をインストールできます。
*   **`pytest` の設定**: `pytest` を使用して非同期テストを実行するには、`pytest-asyncio` プラグインをインストールし、`pytest.ini` または `pyproject.toml` で設定を行う必要があります。
    *   `pytest.ini` で設定を行う場合は、`[pytest]` セクションに `asyncio_mode = auto` を記述します。
    *   `pyproject.toml` で設定を行う場合は、`[tool.pytest.ini_options]` セクションに `asyncio_mode = "auto"` を記述します。
*   **Playwright のインストール**: Playwright のブラウザ実行ファイルは、`uv run playwright install --with-deps chromium` でインストールする必要があります。
    *   **`allure` のインストール**: `allure` は、以下のコマンドでインストールする必要があります。
        ```bash
        sudo apt-get install -y default-jre
        wget https://github.com/allure-framework/allure2/releases/download/2.18.1/allure_2.18.1-1_all.deb
        sudo dpkg -i allure_2.18.1-1_all.deb
        rm allure_2.18.1-1_all.deb
        rm install_jre.log
        ```
*   **`conftest.py` の使い方**: テストファイルからプロジェクトのモジュールをインポートするには、`conftest.py` を使用して `sys.path` を更新する必要があります。
*   **`pyproject.toml` の設定**: `pyproject.toml` に `packages = ["pages"]` を追記することで、`pages` ディレクトリをパッケージとして認識させることができます。
*   **`pytest-cov` の設定**: `pytest-cov` は、`pyproject.toml` の `[project]` セクションを読み込もうとしますが、形式が正しくないとエラーが発生します。`[project]` セクションを削除するか、`pytest.ini` に `testpaths` を設定することで、エラーを回避できます。
*   **プルリクエストの作成**: GitHub API を使用してプルリクエストを作成するには、`curl` コマンドを使用し、`GITHUB_TOKEN` を設定する必要があります。
*   **`sudo apt-get install` の注意点**: `sudo apt-get install` は時間がかかる場合があり、バックグラウンドで実行するとプロンプトに応答できなくなるため、`-y` オプションを使用するか、フォアグラウンドで実行する必要があります。また、ロックファイルによる競合が発生する可能性があるため、注意が必要です。
*   **`git filter-branch` の使い方**: 過去のコミット履歴からファイルを削除するには、`git filter-branch` を使用できますが、注意が必要です。
*   **`README.md` の記述**: `README.md` には、実行手順や設定だけでなく、削除したファイルや変更点についても記述することで、他の開発者が理解しやすくなります。
*   **`git push --force` の使い方**: 強制プッシュは、リモートブランチの履歴を書き換えるため、注意して使用する必要があります。
*   **プロジェクトのナレッジ**: プロジェクトに関するナレッジは、この `openhands_instructions` に記述してください。
*   **`allure serve` の実行**: `allure serve` コマンドは、バックグラウンドで実行し、ブラウザでレポートを確認後、プロセスをkillする必要があります。`uvx` は `apt-get` でインストールされた `allure` を認識しないため、直接 `allure serve` コマンドを使用する必要があります。
*   **ブラウザでのレポート確認**: `allure serve` が出力するURLをブラウザで開き、レポートを確認します。
*   **ファイル編集の代替手段**: `str_replace_editor` や `sed` コマンドでの編集が困難な場合、ファイルを削除して再作成するという手段が有効です。
*   **プルリクエストの作成**: GitHub API を使用してプルリクエストを作成する際には、リポジトリ名や組織名を正しく取得する必要があります。`git remote -v` の出力からリポジトリ情報を抽出する際には、`awk` や `sed` などのコマンドの処理を慎重に行う必要があります。また、APIリクエストが失敗した場合は、リポジトリ名や組織名が正しいか確認する必要があります。
*   **`here document` の注意点**: `cat << EOF` のような `here document` は、タイムアウトが発生する場合があります。
*   **`echo` コマンドの注意点**: `echo` コマンドで複数行の文字列を生成し、リダイレクトでファイルに書き込む場合、特殊文字のエスケープが複雑になるため、注意が必要です。
*   **`sed` コマンドの注意点**: `sed` コマンドは、特殊文字のエスケープが複雑になるため、注意して使用する必要があります。

*   **`pytest` のテスト自動検出**: `pytest` は、テストファイル内の `test_` で始まる関数を自動的にテストケースとして認識し、実行します。そのため、テスト関数を `main` 関数内で明示的に呼び出す必要はありません。
*   **`async def main():` の不要性**: `pytest` を使用してテストを実行する場合、`async def main():` 関数は不要です。`pytest` はテスト関数を自動的に検出して実行するため、`main` 関数は必要ありません。

### 1. `str_replace_editor` の挙動に関する注意点
*   **`str_replace_editor` の制限事項**: `str_replace_editor` は、複数行にわたる編集や、複雑なパターンでの編集が難しい場合があります。
    *   `str_replace_editor` の `create` コマンドは、内部で `\` をエスケープしてしまうため、ファイル作成時に構文エラーが発生する場合があります。
    *   `str_replace_editor` の `str_replace` コマンドは、以下の制限があります。
        *   `old_str` はファイル内の文字列と完全に一致する必要があります。
        *   複数行の削除はできません。`new_str` に空文字列を指定しても、行は削除されず空行として残ります。
        *   存在しない文字列の置換を試みてもエラーは発生しません。
*   **`str_replace_editor` の `insert` コマンド**:
    *   指定した行の後に新しい行を挿入できます。
*   **`str_replace_editor` の `undo_edit` コマンド**:
    *   最後の編集操作を取り消すことができます。

**`test_edit.txt` の編集パターンと結果**

```
This is the first line.
This is the second line.
This is the third line.
This is the fourth line with "quotes".
This is the fifth line with 'single quotes'.
This is the sixth line with backslash \\.
This is the seventh line with a very long string that should not cause any issues with the str_replace command. This is a very long string that should not cause any issues with the str_replace command. This is a very long string that should not cause any issues with the str_replace command.
This is the eighth line.
This is the ninth line.
This is the tenth line.
```

#### 編集パターンと結果

##### 1. 単一行の置換

-   **コマンド:**
    ```bash
    str_replace_editor --command str_replace --path /workspace/test_edit.txt --old_str "This is the second line." --new_str "This is the modified second line."
    ```
-   **結果:**
    -   `This is the second line.` が `This is the modified second line.` に置換された。
-   **成功**

##### 2. 特殊文字を含む行の置換

-   **コマンド:**
    ```bash
    str_replace_editor --command str_replace --path /workspace/test_edit.txt --old_str "This is the fourth line with \\"quotes\\"." --new_str "This is the modified fourth line with \\\"quotes\\\".
    ```
-   **結果:**
    -   `This is the fourth line with "quotes".` が `This is the modified fourth line with \"quotes\".` に置換された。
-   **成功**

##### 3. 複数行の置換

-   **コマンド:**
    ```bash
    str_replace_editor --command str_replace --path /workspace/test_edit.txt --old_str "This is the fifth line with 'single quotes'.\nThis is the sixth line with backslash \\." --new_str "This is the modified fifth line with \'single quotes\'.\nThis is the modified sixth line with backslash \\\\."
    ```
-   **結果:**
    -   複数行が正しく置換された。
-   **成功**

##### 4. 存在しない文字列の置換

-   **コマンド:**
    ```bash
    str_replace_editor --command str_replace --path /workspace/test_edit.txt --old_str "This is a non-existent line." --new_str "This is a new line."
    ```
-   **結果:**
    -   エラーは発生せず、何も変更されなかった。
-   **成功 (ただし、何も変更されない)**

##### 5. 長い行の置換

-   **コマンド:**
    ```bash
    str_replace_editor --command str_replace --path /workspace/test_edit.txt --old_str "This is the seventh line with a very long string that should not cause any issues with the str_replace command. This is a very long string that should not cause any issues with the str_replace command. This is a very long string that should not cause any issues with the str_replace command." --new_str "This is the modified seventh line with a very long string."
    ```
-   **結果:**
    -   長い行が正しく置換された。
-   **成功**

##### 6. 複数行の削除 (失敗)

-   **コマンド:**
    ```bash
     str_replace_editor --command str_replace --path /workspace/test_edit.txt --old_str "This is the eighth line.\nThis is the ninth line." --new_str ""
    ```
-   **結果:**
    -   複数行が削除されず、空行として残った。
-   **失敗**

##### 7. 行の挿入

-   **コマンド:**
    ```bash
    str_replace_editor --command insert --path /workspace/test_edit.txt --insert_line 2 --new_str "This is the inserted line."
    ```
-   **結果:**
    -   指定した行の後に新しい行が挿入された。
-   **成功**

##### 8. 編集の取り消し

-   **コマンド:**
    ```bash
    str_replace_editor --command undo_edit --path /workspace/test_edit.txt
    ```
-   **結果:**
    -   最後の編集操作が取り消された。
-   **成功**

#### まとめ

-   `str_replace_editor` は、単一行、複数行、特殊文字を含む文字列の置換を正しく行うことができる。
-   `str_replace_editor` は、存在しない文字列の置換を試みてもエラーは発生しない。
-   `str_replace_editor` は、長い行の置換も正しく行うことができる。
-   `str_replace_editor` では、複数行の削除はできない。
-   `str_replace_editor` は、指定した行の後に新しい行を挿入できる。
-   `str_replace_editor` は、最後の編集操作を取り消すことができる。
