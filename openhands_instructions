---
name: repo
agent: CodeAct
---
Repository: e2e-test-automation
Description: Playwrightを使用したE2Eテストを自動化するPythonプロジェクトです。与えられたURLからHTMLを解析し、Page Object Modelのコードを自動生成します。このプロジェクトは、Web UI テストをPlaywright ＆ Page Object Model (POM) で実現するためにAI Agent[OpenHands](https://github.com/All-Hands-AI/OpenHands)を使用している実験的なプロジェクトです。
Directory Structure:
- tests/: E2Eテストスクリプトを格納するディレクトリ
- pages/: Page Object Modelのクラスを格納するディレクトリ
- utils/: ユーティリティ関数などを格納するディレクトリ

**プロジェクトの会話は全て日本語で行う**

## Setup

1. install [uv](https://docs.astral.sh/uv/getting-started/installation/)

    `uv`は`Rust`で書かれた非常に高速なPythonパッケージ&プロジェクト管理ツールです。
    - macOS and linux
    ```sh
    curl -LsSf https://astral.sh/uv/install.sh | sh
    echo 'eval "$(uv generate-shell-completion zsh)"' >> ~/.zshrc
    echo 'eval "$(uvx --generate-shell-completion zsh)"' >> ~/.zshrc
    ```
2. 依存関係をインストールします。
    ```bash
    uv sync
    ```
3. Playwrightのブラウザバイナリをインストールします。
    ```bash
    uv run playwright install --with-deps chromium
    ```
4. 仮想環境を作成します。
    ```bash
    uv venv
    ```
5. 仮想環境を有効化します。
    ```bash
    source .venv/bin/activate
    ```
6. `allure`（テストレポート自動生成ツール） をインストールします。
    ```bash
    sudo apt-get install -y default-jre
    wget https://github.com/allure-framework/allure2/releases/download/2.18.1/allure_2.18.1-1_all.deb
    sudo dpkg -i allure_2.18.1-1_all.deb
    rm allure_2.18.1-1_all.deb
    rm install_jre.log
    ```

## Guidelines
- コードスタイルは`PEP8`を準拠する。１行が長くなる場合は適宜改行する。改行ルールは[Flake8 Rules: Line break occurred after a binary operator (W504)](https://www.flake8rules.com/rules/W504.html)に準拠する
- テストスクリプトは`tests/`ディレクトリに配置します。
- 各テストケースは、対応するページのPage Object Modelクラスを使用します。
- Page Object Modelクラスは`pages/`ディレクトリに配置します。
- 可能な限りType Hintを記述します。
- 新しい機能を追加する際は、必ずE2Eテストを追加します。
- `git add`を実行する際には、必ず対象となるファイルを指定すること。
- `git add` を実行する際には、必ず `git status` でファイルの変更状態を確認すること。
- ファイル内容の変更、削除の際には、変更前のファイル内容を確認し、編集後に変更後のファイル内容を確認すること。
- `git commit`を実行する際には、必ず`-m`オプションを指定し適切な`commit message`を記述すること。

## テストのセットアップとpytestフィクスチャ
- **ページオブジェクトの初期化**: ページオブジェクトは、`conftest.py` 内のpytestフィクスチャを使用して初期化されます。これにより、テストのセットアップが簡素化され、コードの可読性が向上します。
- **データ駆動テスト**: テストデータは `test_data.json` ファイルで管理され、pytestフィクスチャを使用してロードされます。これにより、テストの柔軟性と保守性が向上します。

## 新しいタブでのテスト
- **タブの処理**: 新しいタブで開くリンクをテストする場合、以下の点に注意が必要です：
    - `expect_popup()` を使用して新しいタブのイベントを待機
    - 新しいタブのコンテキストに切り替えて操作を行う
    - ページの読み込み状態を適切に待機
    ```python
    async with page.expect_popup() as new_page_info:
        await link.click()
    new_page = await new_page_info.value
    await new_page.wait_for_load_state()
    ```

## 柔軟なテスト設計
- **ロケーターの設計**:
    - 完全一致よりも部分一致を使用（contains()など）
    - URL検証は完全一致ではなくドメインなど重要な部分のみ検証
    - タイトル検証も同様に柔軟な検証方法を選択
    ```python
    # 良い例
    link = page.locator('xpath=//a[contains(@href,"endpoints.huggingface.co")]')
    assert "endpoints.huggingface.co" in page.url
    assert "Inference Endpoints" in await page.title()
    
    # 避けるべき例
    link = page.locator('xpath=//a[@href="https://exact.url/path"]')
    assert page.url == "https://exact.url/path"
    assert await page.title() == "Exact Title"
    ```
- **待機戦略**:
    - 要素の可視性を確認
    - ページの読み込み状態を確認
    - 適切なタイムアウト値の設定

### 要素特定におけるXPathの活用
- Playwright で要素を特定する際、CSSセレクタだけでなく、XPath も積極的に活用しましょう。
- 特に、以下のような場合に XPath が有効です。
    - CSSセレクタでは特定が難しい複雑な要素構造の場合
    - テキストコンテンツの一部で要素を特定したい場合
- 例: `//article[contains(@class, "overview-card-wrapper")][1]` のように、特定のクラスを持つ要素の子要素を特定できます。
- 要素を特定する際は、ブラウザの開発者ツールで要素の構造を正確に把握しましょう。
- テストが失敗した場合は、まず要素の特定方法を見直すことを推奨します。
- `a:has-text("text")` のようなCSSセレクタは、要素のテキストコンテンツが完全に一致する場合にのみ機能します。
- XPath の `contains()` 関数は、テキストの一部が含まれる要素を特定するのに役立ちます。
- ただし、XPath で要素を特定する際は、**どの要素を特定すべきか**を間違えないように注意しましょう。

## Examples
- 新しいテストケースを追加する
  1. `tests/`ディレクトリに新しいテストスクリプトファイルを作成します。
  2. テスト対象のページに対応するPage Object Modelクラスを`pages/`ディレクトリに作成します。
  3. テストスクリプト内でPage Object Modelクラスを使用して、テストシナリオを実装します。
- Page Object Modelクラスを作成する
  1. `pages/`ディレクトリに新しいPythonファイルを作成します。
  2. ファイル内で、ページに対応するPage Object Modelクラスを定義します。
  3. クラス内には、ページ上の要素にアクセスするためのメソッドを定義します。

## Custom Instructions
- **会話は日本語で行うこと。**
- **作業区切りの良いタイミングで、進捗をissueのコメントに投稿すること。チーム開発で他メンバーとの競合を避けるために必要です**
- **`todays_instructions.md`はpush前に削除すること**

## Note:
- 指示はissueに記載
- issue, コメント投稿にはGithub APIを使用する
- issue, コメント投稿時のコミュニケーション言語は**日本語**
- issue, コメント投稿時はMarkdown形式で記述