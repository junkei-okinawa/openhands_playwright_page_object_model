---
name: repo
agent: CodeAct
---
Repository: e2e-test-automation
Description: Playwrightを使用したE2Eテストを自動化するPythonプロジェクトです。与えられたURLからHTMLを解析し、Page Object Modelのコードを自動生成します。
Directory Structure:
- tests/: E2Eテストスクリプトを格納するディレクトリ
- pages/: Page Object Modelのクラスを格納するディレクトリ
- utils/: ユーティリティ関数などを格納するディレクトリ

**プロジェクトの会話は全て日本語で行う**

## Setup

### 1-1. install [uv](https://docs.astral.sh/uv/getting-started/installation/)
An extremely fast Python package and project manager, written in Rust.
- macOS and linux
```sh
curl -LsSf https://astral.sh/uv/install.sh | sh
echo 'eval "$(uv generate-shell-completion zsh)"' >> ~/.zshrc
echo 'eval "$(uvx --generate-shell-completion zsh)"' >> ~/.zshrc
```
- `uv sync`を実行して依存関係をインストールします。
- `uv run playwright install --with-deps chromium`を実行してPlaywrightのブラウザバイナリをインストールします。
- `uv venv`を実行して仮想環境を作成します。
- `source .venv/bin/activate`を実行して仮想環境を有効化します。
- `allure` をインストールします。
    ```bash
    sudo apt-get install -y default-jre
    wget https://github.com/allure-framework/allure2/releases/download/2.18.1/allure_2.18.1-1_all.deb
    sudo dpkg -i allure_2.18.1-1_all.deb
    rm allure_2.18.1-1_all.deb
    rm install_jre.log
    ```

## Guidelines
- テストスクリプトは`tests/`ディレクトリに配置します。
- 各テストケースは、対応するページのPage Object Modelクラスを使用します。
- Page Object Modelクラスは`pages/`ディレクトリに配置します。
- 可能な限りType Hintを記述します。
- 新しい機能を追加する際は、必ずE2Eテストを追加します。
- `git add`を実行する際には、必ず対象となるファイルを指定すること。
- `git commit`を実行する際には、必ず`-m`オプションを指定し適切な`commit message`を記述すること。

## Examples
- 新しいテストケースを追加する
  1. `tests/`ディレクトリに新しいテストスクリプトファイルを作成します。
  2. テスト対象のページに対応するPage Object Modelクラスを`pages/`ディレクトリに作成します。
  3. テストスクリプト内でPage Object Modelクラスを使用して、テストシナリオを実装します。
- Page Object Modelクラスを作成する
  1. `pages/`ディレクトリに新しいPythonファイルを作成します。
  2. ファイル内で、ページに対応するPage Object Modelクラスを定義します。
  3. クラス内には、ページ上の要素にアクセスするためのメソッドを定義します。

note:
*   **`uv` の使い方**: `uv` は Python のパッケージ管理ツールとして非常に高速で便利ですが、仮想環境の管理や `pytest` の実行には注意が必要です。
    *   `uv sync` は `requirements.txt` に記載された依存関係を仮想環境にインストールします。
    *   `uv tool install` はツールをグローバルにインストールし、仮想環境とは独立して実行されます。
    *   `uvx` は `uv tool` でインストールされたツールを実行するためのコマンドですが、仮想環境の依存関係を自動的に解決する機能はありません。
    *   `uv pip install -r requirements.txt` で仮想環境に依存関係をインストールできます。
*   **`pytest` の設定**: `pytest` を使用して非同期テストを実行するには、`pytest-asyncio` プラグインをインストールし、`pytest.ini` または `pyproject.toml` で設定を行う必要があります。
    *   `pytest.ini` で設定を行う場合は、`[pytest]` セクションに `asyncio_mode = auto` を記述します。
    *   `pyproject.toml` で設定を行う場合は、`[tool.pytest.ini_options]` セクションに `asyncio_mode = "auto"` を記述します。
*   **Playwright のインストール**: Playwright のブラウザ実行ファイルは、`uv run playwright install --with-deps chromium` でインストールする必要があります。
    *   **`allure` のインストール**: `allure` は、以下のコマンドでインストールする必要があります。
        ```bash
        sudo apt-get install -y default-jre
        wget https://github.com/allure-framework/allure2/releases/download/2.18.1/allure_2.18.1-1_all.deb
        sudo dpkg -i allure_2.18.1-1_all.deb
        rm allure_2.18.1-1_all.deb
        rm install_jre.log
        ```
*   **`conftest.py` の使い方**: テストファイルからプロジェクトのモジュールをインポートするには、`conftest.py` を使用して `sys.path` を更新する必要があります。
*   **`pyproject.toml` の設定**: `pyproject.toml` に `packages = ["pages"]` を追記することで、`pages` ディレクトリをパッケージとして認識させることができます。
*   **`pytest-cov` の設定**: `pytest-cov` は、`pyproject.toml` の `[project]` セクションを読み込もうとしますが、形式が正しくないとエラーが発生します。`[project]` セクションを削除するか、`pytest.ini` に `testpaths` を設定することで、エラーを回避できます。
*   **`str_replace_editor` の制限事項**: `str_replace_editor` は、複数行にわたる編集や、複雑なパターンでの編集が難しい場合があります。
    *   `str_replace_editor` の `create` コマンドは、内部で `\` をエスケープしてしまうため、ファイル作成時に構文エラーが発生する場合があります。
    *   `str_replace_editor` の `str_replace` コマンドは、複数行にわたる編集や、複雑なパターンでの編集が難しい場合があります。
*   **`here document` の注意点**: `cat << EOF` のような `here document` は、タイムアウトが発生する場合があります。
*   **`echo` コマンドの注意点**: `echo` コマンドで複数行の文字列を生成し、リダイレクトでファイルに書き込む場合、特殊文字のエスケープが複雑になるため、注意が必要です。
*   **`sed` コマンドの注意点**: `sed` コマンドは、特殊文字のエスケープが複雑になるため、注意して使用する必要があります。
*   **プルリクエストの作成**: GitHub API を使用してプルリクエストを作成するには、`curl` コマンドを使用し、`GITHUB_TOKEN` を設定する必要があります。
*   **`sudo apt-get install` の注意点**: `sudo apt-get install` は時間がかかる場合があり、バックグラウンドで実行するとプロンプトに応答できなくなるため、`-y` オプションを使用するか、フォアグラウンドで実行する必要があります。また、ロックファイルによる競合が発生する可能性があるため、注意が必要です。
*   **`git filter-branch` の使い方**: 過去のコミット履歴からファイルを削除するには、`git filter-branch` を使用できますが、注意が必要です。
*   **`README.md` の記述**: `README.md` には、実行手順や設定だけでなく、削除したファイルや変更点についても記述することで、他の開発者が理解しやすくなります。
*   **`git push --force` の使い方**: 強制プッシュは、リモートブランチの履歴を書き換えるため、注意して使用する必要があります。
*   **プロジェクトのナレッジ**: プロジェクトに関するナレッジは、この `openhands_instructions` に記述してください。
*   **`allure serve` の実行**: `allure serve` コマンドは、バックグラウンドで実行し、ブラウザでレポートを確認後、プロセスをkillする必要があります。`uvx` は `apt-get` でインストールされた `allure` を認識しないため、直接 `allure serve` コマンドを使用する必要があります。
*   **ブラウザでのレポート確認**: `allure serve` が出力するURLをブラウザで開き、レポートを確認します。
*   **ファイル編集の代替手段**: `str_replace_editor` や `sed` コマンドでの編集が困難な場合、ファイルを削除して再作成するという手段が有効です。
*   **プルリクエストの作成**: GitHub API を使用してプルリクエストを作成する際には、リポジトリ名や組織名を正しく取得する必要があります。`git remote -v` の出力からリポジトリ情報を抽出する際には、`awk` や `sed` などのコマンドの処理を慎重に行う必要があります。また、APIリクエストが失敗した場合は、リポジトリ名や組織名が正しいか確認する必要があります。

## `str_replace_editor`ツール利用時の注意点と教訓

この文書は、過去の経験から得られた教訓を共有し、今後の開発における知識として活用することを目的としています。

### 1. `str_replace_editor` の挙動に関する注意点

**事例:**

`datasets_page.py` を編集する際、`str_replace_editor` の `insert` コマンドで以下のコードを挿入しようとしたケースがありました。

```python
@property
def dataset_list(self):
    return self.page.locator('ul[data-testid="dataset-list"]')
```

しかし、`str_replace_editor` はこのコードを以下のように解釈しました。

```python
@property\\n    def dataset_list(self):\\n        return self.page.locator(\\'ul[data-testid=\\\\"dataset-list\\\\\\"]\\')
```

本来、`\n` は改行文字、`\` はエスケープ文字として解釈されるべきですが、それぞれ `\\n`、`\\` とエスケープされてしまいました。その結果、Python コードとして解釈できず `SyntaxError` が発生しました。

**教訓:**

`str_replace_editor` は、文字列を挿入する際に `\` をエスケープする仕様があります。この挙動を十分に理解せずに使用すると、意図しないエスケープが発生し、エラーの原因となる可能性があります。特に複数行にわたるコードや特殊文字を含む文字列を挿入する際には注意が必要です。

### 2. 問題解決における代替手段の検討の重要性

**事例:**

`str_replace_editor` でエスケープ問題が発生した際、すぐに `str_replace_editor` の利用を中止し、他の方法を検討すべきでした。例えば、`echo` コマンドとリダイレクトを利用してファイルを作成する方法であれば、エスケープの問題を回避できました。

しかし、当時は `str_replace_editor` の利用に固執してしまい、他の手段を検討するまでに時間を要しました。

**教訓:**

特定の方法で問題が発生した場合、その方法に固執するのではなく、他の代替手段を迅速に検討することが重要です。問題解決のためには、ツールの特性を理解し、状況に応じて最適な方法を選択できる柔軟性が必要です。

### 3. 過去の事例からの学習の重要性

**事例:**

過去にも `str_replace_editor` で複数行の文字列を編集する際に、同様のエスケープ問題が発生した経験がありました。しかし、その時の経験を十分に活かすことができませんでした。

過去の失敗を記録し、類似の問題が発生した場合に参照できるようにしておくべきでした。

**教訓:**

過去の失敗は貴重な学習機会です。同じ過ちを繰り返さないために、過去の事例を記録し、分析する仕組みを構築することが重要です。特に、特定のツールや操作で発生しやすい問題は、注意点として共有し、再発防止に努めるべきです。

### まとめ

上記の事例から、以下の点が今後の開発において重要であることがわかります。

*   **ツールの特性の正確な理解:**  利用するツールの挙動や仕様を正確に理解し、予期せぬ問題の発生を防ぐ。
*   **柔軟な問題解決:**  特定の方法に固執せず、状況に応じて最適な代替手段を検討する。
*   **過去の経験からの学習:**  過去の失敗事例を記録・分析し、再発防止に繋げる。

今後はこれらの教訓を活かし、より効率的かつ確実な開発を目指します。
